name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="time-display-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            BINARY_NAME="time-display-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi
          go build -ldflags="-s -w" -o "$BINARY_NAME" main.go
          
          # 压缩文件
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${BINARY_NAME}.zip" "$BINARY_NAME"
            echo "ASSET=${BINARY_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
            echo "ASSET=${BINARY_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.ASSET }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          
          # 移动所有压缩包到 release 目录
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} release/ \;
          
          echo "Release files:"
          ls -lh release/

      - name: Create sample config files
        run: |
          # 创建示例 config.json
          cat > config.json << 'EOF'
          {
            "datesFile": "dates.json",
            "sentencesFile": "sentences.json",
            "showDateAmount": 7,
            "dateFormat": "2006/01/02",
            "location": {
              "latitude": 39.9042,
              "longitude": 116.4074,
              "timezone": 8
            },
            "showSunTimes": true,
            "showDailySentence": true,
            "cacheDir": "cache",
            "sentenceUpdateMode": "count",
            "sentenceUpdateInterval": 5
          }
          EOF
          
          # 创建示例 dates.json
          cat > dates.json << 'EOF'
          {
            "events": [
              {
                "name": "春节",
                "type": "festival",
                "month": 1,
                "day": 1,
                "repeatYearly": true,
                "alwaysShow": true,
                "isLunar": true
              },
              {
                "name": "国庆节",
                "type": "festival",
                "month": 10,
                "day": 1,
                "repeatYearly": true,
                "alwaysShow": false,
                "isLunar": false
              }
            ]
          }
          EOF
          
          # 创建示例 sentences.json
          cat > sentences.json << 'EOF'
          {
            "sentences": [
              "今天也要加油哦！",
              "生活明朗，万物可爱。",
              "星光不问赶路人，时光不负有心人。",
              "愿你走出半生，归来仍是少年。",
              "保持热爱，奔赴山海。"
            ]
          }
          EOF
          
          # 打包配置文件
          zip release/config-files.zip config.json dates.json sentences.json
          tar -czf release/config-files.tar.gz config.json dates.json sentences.json

      - name: Generate SHA256 checksums
        run: |
          cd release
          sha256sum * > SHA256SUMS
          cat SHA256SUMS

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 📦 下载说明
          
          请根据您的操作系统和架构选择对应的文件：
          
          ### Windows
          - `time-display-windows-amd64.exe.zip` - Windows 64位
          
          ### Linux
          - `time-display-linux-amd64.tar.gz` - Linux 64位 (x86_64)
          - `time-display-linux-arm64.tar.gz` - Linux ARM64
          
          ### macOS
          - `time-display-darwin-amd64.tar.gz` - macOS Intel 芯片
          - `time-display-darwin-arm64.tar.gz` - macOS Apple Silicon (M1/M2/M3)
          
          ### 配置文件
          - `config-files.zip` / `config-files.tar.gz` - 示例配置文件
          
          ### 校验文件
          - `SHA256SUMS` - 所有文件的 SHA256 校验和
          
          ---
          
          ## 🚀 快速开始
          
          ### Linux/macOS
          ```bash
          # 下载并解压
          tar -xzf time-display-linux-amd64.tar.gz
          tar -xzf config-files.tar.gz
          
          # 添加执行权限
          chmod +x time-display-linux-amd64
          
          # 运行
          ./time-display-linux-amd64
          ```
          
          ### Windows (PowerShell)
          ```powershell
          # 解压
          Expand-Archive time-display-windows-amd64.exe.zip
          Expand-Archive config-files.zip
          
          # 运行
          .\time-display-windows-amd64.exe
          ```
          
          ---
          
          ## 📖 使用说明
          
          ### 查看帮助
          ```bash
          ./time-display -h
          ```
          
          ### 添加事件
          ```bash
          # 交互式添加
          ./time-display -add-event
          
          # 指定事件名称
          ./time-display -add-event 春节
          ```
          
          ### 添加文案
          ```bash
          ./time-display -add-sentence "你的文案内容"
          ```
          
          ### 刷新文案
          ```bash
          ./time-display -refresh-sentence
          ```
          
          ---
          
          ## 📝 详细文档
          
          完整使用说明请查看 [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          ## 🔐 文件校验
          
          下载后建议验证文件完整性：
          ```bash
          sha256sum -c SHA256SUMS
          ```
          EOF
          
          {
            echo "notes<<RELEASE_NOTES_EOF"
            cat release_notes.md
            echo "RELEASE_NOTES_EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release/*
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (Manual)
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          tag_name: manual-${{ github.run_number }}
          name: Manual Build #${{ github.run_number }}
          files: release/*
          body: ${{ steps.release_notes.outputs.notes }}
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}